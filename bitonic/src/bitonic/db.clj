(ns bitonic.db
  (:require [taoensso.carmine :as car]))

;; Redis connection configuration
(def redis-conn
  {:pool {}
   :spec {:host "localhost"
          :port 6379
          :timeout-ms 4000}})

;; Macro wrapper for Redis commands using wcar
(defmacro wcar* [& body]
  `(car/wcar redis-conn ~@body))

;; Stream key for storing test results
(def test-results-stream "test-results")

;; Maximum number of results to keep in the stream (auto-trim)
(def max-stream-length 1000)

(defn init-db!
  "Initialize Redis connection (no schema needed for streams)"
  []
  ;; Test connection
  (try
    (wcar* (car/ping))
    (println "Redis connection established successfully")
    true
    (catch Exception e
      (println "Failed to connect to Redis:" (.getMessage e))
      false)))

(defn insert-result!
  "Insert a test result into Redis stream using XADD.
   Returns the entry ID generated by Redis."
  [test-name status expected actual]
  (wcar*
    (car/xadd test-results-stream
              "*"  ;; Auto-generate ID based on timestamp
              "test_name" test-name
              "status" status
              "expected" (pr-str expected)
              "actual" (pr-str actual)
              "ts" (str (System/currentTimeMillis)))
    ;; Auto-trim to keep only the latest results (prevents unbounded growth)
    (car/xtrim test-results-stream "MAXLEN" "~" max-stream-length)))

(defn get-results
  "Retrieve the latest N test results from Redis stream using XREVRANGE.
   Returns results in reverse chronological order (newest first)."
  ([]
   (get-results 100))
  ([limit]
   (let [raw-results (wcar* (car/xrevrange test-results-stream "+" "-" "COUNT" limit))]
     ;; Parse Redis stream format: [[id [[field1 value1 field2 value2 ...]]]]
     (mapv (fn [[id fields]]
             (let [field-map (apply hash-map fields)]
               {:id id
                :test-name (get field-map "test_name")
                :status (get field-map "status")
                :expected (read-string (get field-map "expected"))
                :actual (read-string (get field-map "actual"))
                :ts (Long/parseLong (get field-map "ts"))}))
           raw-results))))

(defn get-stream-length
  "Get the current number of entries in the stream"
  []
  (wcar* (car/xlen test-results-stream)))

(defn clear-results!
  "Clear all test results from the stream (useful for testing/cleanup)"
  []
  (wcar* (car/del test-results-stream)))

;; Example: Batch multiple operations efficiently using wcar
(defn insert-results-batch!
  "Insert multiple test results in a single pipelined request"
  [results]
  (wcar*
    (doall
      (for [{:keys [test-name status expected actual]} results]
        (car/xadd test-results-stream
                  "*"
                  "test_name" test-name
                  "status" status
                  "expected" (pr-str expected)
                  "actual" (pr-str actual)
                  "ts" (str (System/currentTimeMillis)))))))
